q()
library(swirl)
swirl()
q()
library(swirl)
swirl()
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut)
qplot(price,data=diamonds,geom="density",color=cut)
swirl()
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut) + geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = . ~ cut) + geom_smooth(method = "lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(x = diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$cut2 <- cut(diamonds$carat, cutpoints)
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd, ]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
swirl()
q()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
print(g)
library(ggplot2)
library(ggplot2movies)
g <- ggplot(movies, aes(votes, rating))
library(datasets)
library(ggplot2)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
set.seed(12345)
par(mar = rep(0.2, 4))
par
dataMatrix = matrix(rnorm(400), nrow = 40)
dataMatrix
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
heatmap(dataMatrix)
library(swirl)
swirl()
dim(ssd)
names(ssd[, 562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- sub1[, 1:3]
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
hclustering <- hclust(mdist, lab.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5 col = "blue")
abline(h=1.5, col = "blue")
abline(h=.4, col = "red")
5
12
abline(h=.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, cm.colors(25))
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black" "red", "green"), pch = 3, cex = 3, lwd = 3)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
skip()
skip()
skip()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
m9\\\\g
\
=
matu %*% matd %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[, 1]
svd1$d
head(constantMatrix)
svd2$d
svd2
svd2$v[, 1:2]
svd2$d
dim(faceData)
a1 <- (svd1$u[, 1] * svd1$d[1]) %*% t(svd1$v)[, 1]
a1 <- (svd1$u[, 1] * svd1$d[1]) %*% t(svd1$v[, 1])
myImage(a1)
a2 <- svd1$u[, 1:2] %*% svd1$d[1:2] %*% t(svd1$v[, 1:2])
a2 <- svd1$u[, 1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[, 1:2])
myImage(a2)
a2 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
myImage(svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5]))
myImage(svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10]))
q()
library(swirl)
swirl()
dim(ssd)
names(ssd[, 562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[, 1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[, 1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[, 10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[, -c(562, 563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[, 2])
midst <- dist(sub1[, c(10:12, maxCon)])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[max.col()])
names(sub1[maxCon])
kClust <- kmeans(sub1[, -c(562:563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562:563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size = 29)
laying <- which(kClust$size == 29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[, 1:3])
walkdown <- which(kClust$size == 49)
kClust
names(kClust)
plot(kClust$centers[walkdown, 1:12],pch=19,ylab="Walkdown Cluster")
library(swirl)
swirl()
dim(om0)
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|')
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
skip()
swirl()
skip()
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
install.packages("knitr")
# Setting the working directory
setwd("C:\\00-AdityaTibrewal\\OneDrive\\Study Mtrl\\Data Science\\Coursera\\Reproducible Analysis\\W2\\Peer Project\\RepData_PeerAssessment1")
# Loading libraries
library(dplyr)
# File reading and pre-processing
activity = read.csv(unzip("activity.zip"), na.strings = "NA")
activity$date = as.Date(activity$date)
# Ask 1 - Steps per day
totalStepsDayWise = group_by(activity, date) %>%
summarise(totalSteps = sum(steps))
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
# Ask 2 - Steps per day (histogram)
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
# Ask 3 - Mean and median of the total number of steps taken per day
medianSteps = median(totalStepsDayWise$totalSteps, na.rm = T)
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
print(paste('Median steps per day: ', medianSteps))
print(paste('Mean steps per day: ', round(meanSteps, 0)))
# Ask 4 - Time series plot of the 5-minute interval (x-axis) and
# the average number of steps taken, averaged across all days (y-axis)
meanStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = mean(steps, na.rm = T))
plot(x = meanStepsMinWise$interval, y = meanStepsMinWise$meanSteps,
type =  "l", xlab = "5-minute intervals",
ylab = "Mean of steps taken across days",
main = "Average number of steps taken by 5-minute intervals")
# Ask 5 - Interval with max average steps
meanStepsMinWise[meanStepsMinWise$meanSteps == max(meanStepsMinWise$meanSteps), 1]
# Ask 6 - Count of missing values
nrow(activity[is.na(activity$steps), ])
# Ask 7 and 8 - Imputing missing values for steps
# Each missing value to be replaced with the median of total steps taken
# in that interval
medianStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = median(steps, na.rm = T))
activityCompleted = activity
# Going throuh the dataset - finding rows with missing values -
# finding median steps for those intervals - imputing in the dataset
for (i in 1:nrow(activityCompleted)) {
if (is.na(activityCompleted[i, 1])) {
activityCompleted[i, 1] =
medianStepsMinWise[medianStepsMinWise$interval == activityCompleted[i, 3], 2]
}
}
# Ask 8 - Histogram of imputed dataset
totalStepsDayWiseCompleted = group_by(activityCompleted, date) %>%
summarise(totalSteps = sum(steps))
par(mfrow = c(1, 2))
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
hist(totalStepsDayWiseCompleted$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps (Imputed)")
dev.off()
# Mean and median of total steps
meanStepsCompleted = mean(totalStepsDayWiseCompleted$totalSteps)
medianStepsCompleted = median(totalStepsDayWiseCompleted$totalSteps)
print(paste('Median steps per day for the imputed data set: ', medianStepsCompleted))
print(paste('Mean steps per day for the imputed data set: ', round(meanStepsCompleted, 0)))
# Comparison of mean and median pre and post imputation
boxplot(totalStepsDayWise$totalSteps, totalStepsDayWiseCompleted$totalSteps,
names = c("Original Data", "Imputed Data"), col = "grey")
legend(1, meanSteps, c("Mean Original Data"), cex = 0.7)
legend(2, meanStepsCompleted, c("Mean Imputed Data"), cex = 0.7)
abline(h = meanSteps, col = "red")
abline(h = meanStepsCompleted, col = "blue")
# Ask 9 - Splitting into Weekday/ Weekend
getDayType = function (dayVal) {
dayType = "weekday"
wkEnd = c("Saturday", "Sunday")
if (weekdays(dayVal) %in% wkEnd) {
dayType =  "weekend"
} else {
dayType = "weekday"
}
dayType
}
activityDayType$dayType = sapply(activityDayType$date, getDayType)
activityDayType$dayType = as.factor(activityDayType$dayType)
setwd("C:\\00-AdityaTibrewal\\OneDrive\\Study Mtrl\\Data Science\\Coursera\\Reproducible Analysis\\W2\\Peer Project\\RepData_PeerAssessment1")
library(dplyr)
activity = read.csv(unzip("activity.zip"), na.strings = "NA")
activity$date = as.Date(activity$date)
totalStepsDayWise = group_by(activity, date) %>%
summarise(totalSteps = sum(steps))
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
medianSteps = median(totalStepsDayWise$totalSteps, na.rm = T)
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
print(paste('Median steps per day: ', medianSteps))
print(paste('Mean steps per day: ', round(meanSteps, 0)))
meanStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = mean(steps, na.rm = T))
plot(x = meanStepsMinWise$interval, y = meanStepsMinWise$meanSteps,
type =  "l", xlab = "5-minute intervals",
ylab = "Mean of steps taken across days",
main = "Average number of steps taken by 5-minute intervals")
meanStepsMinWise[meanStepsMinWise$meanSteps == max(meanStepsMinWise$meanSteps), 1]
nrow(activity[is.na(activity$steps), ])
medianStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = median(steps, na.rm = T))
activityCompleted = activity
for (i in 1:nrow(activityCompleted)) {
if (is.na(activityCompleted[i, 1])) {
activityCompleted[i, 1] =
medianStepsMinWise[medianStepsMinWise$interval == activityCompleted[i, 3], 2]
}
}
totalStepsDayWiseCompleted = group_by(activityCompleted, date) %>%
summarise(totalSteps = sum(steps))
par(mfrow = c(1, 2))
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
hist(totalStepsDayWiseCompleted$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps (Imputed)")
dev.off()
meanStepsCompleted = mean(totalStepsDayWiseCompleted$totalSteps)
medianStepsCompleted = median(totalStepsDayWiseCompleted$totalSteps)
print(paste('Median steps per day for the imputed data set: ', medianStepsCompleted))
print(paste('Mean steps per day for the imputed data set: ', round(meanStepsCompleted, 0)))
boxplot(totalStepsDayWise$totalSteps, totalStepsDayWiseCompleted$totalSteps,
names = c("Original Data", "Imputed Data"), col = "grey")
legend(1, meanSteps, c("Mean Original Data"), cex = 0.7)
legend(2, meanStepsCompleted, c("Mean Imputed Data"), cex = 0.7)
abline(h = meanSteps, col = "red")
abline(h = meanStepsCompleted, col = "blue")
getDayType = function (dayVal) {
dayType = "weekday"
wkEnd = c("Saturday", "Sunday")
if (weekdays(dayVal) %in% wkEnd) {
dayType =  "weekend"
} else {
dayType = "weekday"
}
dayType
}
activityDayType$dayType = sapply(activityDayType$date, getDayType)
activityDayType = totalStepsDayWise
activityDayType$dayType = sapply(activityDayType$date, getDayType)
activityDayType$dayType = as.factor(activityDayType$dayType)
View(activityDayType)
head(activityDayType)
activityDayType = activity
activityDayType$dayType = sapply(activityDayType$date, getDayType)
activityDayType$dayType = as.factor(activityDayType$dayType)
head(activityDayType)
library(ggplot2)
activityDayTypeAvg = group_by(activityDayType) %>%
summarise(avgSteps = mean(steps, na.rm = T))
View(activityDayTypeAvg)
activityDayTypeAvg = group_by(activityDayTypeAvg$interval) %>%
summarise(avgSteps = mean(steps, na.rm = T))
activityDayTypeAvg = group_by(activityDayType$interval) %>%
summarise(avgSteps = mean(steps, na.rm = T))
head(activityDayType)
group_by(activityDayType$interval)
activityDayTypeAvg = group_by(activityDayType, interval) %>%
summarise(avgSteps = mean(steps, na.rm = T))
View(activityDayTypeAvg)
head(activityDayTypeAvg)
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps))
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(nrow = 2) +
geom_line()
activityDayTypeAvg = group_by(activityDayType, c(interval, dayType)) %>%
summarise(avgSteps = mean(steps, na.rm = T))
activityDayTypeAvg = group_by(activityDayType, interval, dayType) %>%
summarise(avgSteps = mean(steps, na.rm = T))
head(activityDayTypeAvg)
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(. ~ dayType, nrow = 2) +
geom_line()
activityDayTypeAvg = group_by(activityDayType, interval, dayType) %>%
summarise(avgSteps = mean(steps, na.rm = T))
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(. ~ dayType, nrow = 2) +
geom_line()
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line()
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 1) +
geom_line()
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue")
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue") +
lab(xlab = "Interval in minutes")
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue") +
labs(xlab = "Interval in minutes")
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue") +
labs(x = "Interval in minutes", y = "Average steps")
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue") +
labs(x = "Interval in minutes", y = "Average steps",
title = "Average steps by weekday/ weekend")
# Setting the working directory
setwd("C:\\00-AdityaTibrewal\\OneDrive\\Study Mtrl\\Data Science\\Coursera\\Reproducible Analysis\\W2\\Peer Project\\RepData_PeerAssessment1")
# Loading libraries
library(dplyr)
library(ggplot2)
# File reading and pre-processing
activity = read.csv(unzip("activity.zip"), na.strings = "NA")
activity$date = as.Date(activity$date)
# Ask 1 - Steps per day
totalStepsDayWise = group_by(activity, date) %>%
summarise(totalSteps = sum(steps))
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
# Ask 2 - Steps per day (histogram)
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
# Ask 3 - Mean and median of the total number of steps taken per day
medianSteps = median(totalStepsDayWise$totalSteps, na.rm = T)
meanSteps = mean(totalStepsDayWise$totalSteps, na.rm = T)
print(paste('Median steps per day: ', medianSteps))
print(paste('Mean steps per day: ', round(meanSteps, 0)))
# Ask 4 - Time series plot of the 5-minute interval (x-axis) and
# the average number of steps taken, averaged across all days (y-axis)
meanStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = mean(steps, na.rm = T))
plot(x = meanStepsMinWise$interval, y = meanStepsMinWise$meanSteps,
type =  "l", xlab = "5-minute intervals",
ylab = "Mean of steps taken across days",
main = "Average number of steps taken by 5-minute intervals")
# Ask 5 - Interval with max average steps
meanStepsMinWise[meanStepsMinWise$meanSteps == max(meanStepsMinWise$meanSteps), 1]
# Ask 6 - Count of missing values
nrow(activity[is.na(activity$steps), ])
# Ask 7 and 8 - Imputing missing values for steps
# Each missing value to be replaced with the median of total steps taken
# in that interval
medianStepsMinWise = group_by(activity, interval) %>%
summarise(meanSteps = median(steps, na.rm = T))
activityCompleted = activity
# Going throuh the dataset - finding rows with missing values -
# finding median steps for those intervals - imputing in the dataset
for (i in 1:nrow(activityCompleted)) {
if (is.na(activityCompleted[i, 1])) {
activityCompleted[i, 1] =
medianStepsMinWise[medianStepsMinWise$interval == activityCompleted[i, 3], 2]
}
}
# Ask 8 - Histogram of imputed dataset
totalStepsDayWiseCompleted = group_by(activityCompleted, date) %>%
summarise(totalSteps = sum(steps))
par(mfrow = c(1, 2))
hist(totalStepsDayWise$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps")
hist(totalStepsDayWiseCompleted$totalSteps, col = "blue", xlab = "Total # of Steps",
main = "Distribution of Total Steps (Imputed)")
dev.off()
# Mean and median of total steps
meanStepsCompleted = mean(totalStepsDayWiseCompleted$totalSteps)
medianStepsCompleted = median(totalStepsDayWiseCompleted$totalSteps)
print(paste('Median steps per day for the imputed data set: ', medianStepsCompleted))
print(paste('Mean steps per day for the imputed data set: ', round(meanStepsCompleted, 0)))
# Comparison of mean and median pre and post imputation
boxplot(totalStepsDayWise$totalSteps, totalStepsDayWiseCompleted$totalSteps,
names = c("Original Data", "Imputed Data"), col = "grey")
legend(1, meanSteps, c("Mean Original Data"), cex = 0.7)
legend(2, meanStepsCompleted, c("Mean Imputed Data"), cex = 0.7)
abline(h = meanSteps, col = "red")
abline(h = meanStepsCompleted, col = "blue")
# Ask 9 - Splitting into Weekday/ Weekend
getDayType = function (dayVal) {
dayType = "weekday"
wkEnd = c("Saturday", "Sunday")
if (weekdays(dayVal) %in% wkEnd) {
dayType =  "weekend"
} else {
dayType = "weekday"
}
dayType
}
activityDayType = activity
activityDayType$dayType = sapply(activityDayType$date, getDayType)
activityDayType$dayType = as.factor(activityDayType$dayType)
# Ask 10 - Average steps at 5-minute intervals split across weekday ~ weekend
activityDayTypeAvg = group_by(activityDayType, interval, dayType) %>%
summarise(avgSteps = mean(steps, na.rm = T))
ggplot(activityDayTypeAvg, aes(x = interval, y = avgSteps)) +
facet_wrap(~ dayType, nrow = 2) +
geom_line(col = "blue") +
labs(x = "Interval in minutes", y = "Average steps",
title = "Average steps by weekday/ weekend")
